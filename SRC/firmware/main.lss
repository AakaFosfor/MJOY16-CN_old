
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000005c6  0000065a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800062  00800062  0000065c  2**0
                  ALLOC
  3 .stab         00000e94  00000000  00000000  0000065c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000006c  00000000  00000000  000014f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000040  00000000  00000000  0000155c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000019b  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000a40  00000000  00000000  00001737  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000003e3  00000000  00000000  00002177  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000051a  00000000  00000000  0000255a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000060  00000000  00000000  00002a74  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000003a2  00000000  00000000  00002ad4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000034f  00000000  00000000  00002e76  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000e8  00000000  00000000  000031c5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__ctors_end>
   4:	0c 94 b4 01 	jmp	0x368	; 0x368 <__vector_1>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000054 <usbDescriptorString0>:
  54:	04 03 09 04                                         ....

00000058 <usbDescriptorStringVendor>:
  58:	18 03 31 00 32 00 33 00 6b 00 75 00 61 00 69 00     ..1.2.3.k.u.a.i.
  68:	2e 00 63 00 6f 00 6d 00                             ..c.o.m.

00000070 <usbDescriptorStringDevice>:
  70:	0e 03 4d 00 6a 00 6f 00 79 00 31 00 36 00           ..M.j.o.y.1.6.

0000007e <usbDescriptorDevice>:
  7e:	12 01 10 01 ff 00 00 08 c0 16 dc 05 00 01 01 02     ................
  8e:	00 01                                               ..

00000090 <usbDescriptorConfiguration>:
  90:	09 02 12 00 01 01 00 80 32 09 04 00 00 00 00 00     ........2.......
  a0:	00 00                                               ..

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf e5       	ldi	r28, 0x5F	; 95
  a8:	d4 e0       	ldi	r29, 0x04	; 4
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	10 e0       	ldi	r17, 0x00	; 0
  b0:	a0 e6       	ldi	r26, 0x60	; 96
  b2:	b0 e0       	ldi	r27, 0x00	; 0
  b4:	e6 ec       	ldi	r30, 0xC6	; 198
  b6:	f5 e0       	ldi	r31, 0x05	; 5
  b8:	02 c0       	rjmp	.+4      	; 0xbe <.do_copy_data_start>

000000ba <.do_copy_data_loop>:
  ba:	05 90       	lpm	r0, Z+
  bc:	0d 92       	st	X+, r0

000000be <.do_copy_data_start>:
  be:	a2 36       	cpi	r26, 0x62	; 98
  c0:	b1 07       	cpc	r27, r17
  c2:	d9 f7       	brne	.-10     	; 0xba <.do_copy_data_loop>

000000c4 <__do_clear_bss>:
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	a2 e6       	ldi	r26, 0x62	; 98
  c8:	b0 e0       	ldi	r27, 0x00	; 0
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	ad 38       	cpi	r26, 0x8D	; 141
  d0:	b1 07       	cpc	r27, r17
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 7b 00 	call	0xf6	; 0xf6 <main>
  d8:	0c 94 e1 02 	jmp	0x5c2	; 0x5c2 <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <usbFunctionSetup>:


USB_PUBLIC uchar usbFunctionSetup(uchar data[8]) {
	usbRequest_t *rq = (void *)data; // cast data to correct type
        
    switch(rq->bRequest) { // custom command is in the bRequest field
  e0:	fc 01       	movw	r30, r24
  e2:	81 81       	ldd	r24, Z+1	; 0x01
  e4:	88 23       	and	r24, r24
  e6:	21 f0       	breq	.+8      	; 0xf0 <usbFunctionSetup+0x10>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	19 f4       	brne	.+6      	; 0xf2 <usbFunctionSetup+0x12>
    case USB_LED_ON:
        PORTD &=~_BV(LED_PIN); // turn LED on 输出低点电平
  ec:	93 98       	cbi	0x12, 3	; 18
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <usbFunctionSetup+0x12>
        return 0;
    case USB_LED_OFF: 
        PORTD |= _BV(LED_PIN); // turn LED off
  f0:	93 9a       	sbi	0x12, 3	; 18
        return 0;
    }

    return 0; // should not get here

}
  f2:	80 e0       	ldi	r24, 0x00	; 0
  f4:	08 95       	ret

000000f6 <main>:

int main(void) {
  f6:	cf 93       	push	r28
  f8:	df 93       	push	r29
    uchar i;
	DDRD|=_BV(LED_PIN);
  fa:	8b 9a       	sbi	0x11, 3	; 17
    wdt_enable(WDTO_1S); // enable 1s watchdog timer
  fc:	2e e0       	ldi	r18, 0x0E	; 14
  fe:	88 e1       	ldi	r24, 0x18	; 24
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	0f b6       	in	r0, 0x3f	; 63
 104:	f8 94       	cli
 106:	a8 95       	wdr
 108:	81 bd       	out	0x21, r24	; 33
 10a:	0f be       	out	0x3f, r0	; 63
 10c:	21 bd       	out	0x21, r18	; 33

    usbInit();
 10e:	0e 94 ac 00 	call	0x158	; 0x158 <usbInit>
        
    usbDeviceDisconnect(); // enforce re-enumeration
 112:	88 9a       	sbi	0x11, 0	; 17
 114:	20 e0       	ldi	r18, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 116:	40 e7       	ldi	r20, 0x70	; 112
 118:	57 e1       	ldi	r21, 0x17	; 23
    for(i = 0; i<250; i++) { // wait 500 ms
        wdt_reset(); // keep the watchdog happy
 11a:	a8 95       	wdr
 11c:	ca 01       	movw	r24, r20
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <main+0x28>
    wdt_enable(WDTO_1S); // enable 1s watchdog timer

    usbInit();
        
    usbDeviceDisconnect(); // enforce re-enumeration
    for(i = 0; i<250; i++) { // wait 500 ms
 122:	2f 5f       	subi	r18, 0xFF	; 255
 124:	2a 3f       	cpi	r18, 0xFA	; 250
 126:	c9 f7       	brne	.-14     	; 0x11a <main+0x24>
        wdt_reset(); // keep the watchdog happy
        _delay_ms(2);
    }
    usbDeviceConnect();
 128:	88 98       	cbi	0x11, 0	; 17
        
    sei(); // Enable interrupts after re-enumeration
 12a:	78 94       	sei
 12c:	cc e2       	ldi	r28, 0x2C	; 44
 12e:	d1 e0       	ldi	r29, 0x01	; 1
        
    while(1) {
        wdt_reset(); // keep the watchdog happy
 130:	a8 95       	wdr
        usbPoll();
 132:	0e 94 b3 00 	call	0x166	; 0x166 <usbPoll>
		
		PORTD &=~_BV(LED_PIN); // turn LED on 输出低点电平
 136:	93 98       	cbi	0x12, 3	; 18
 138:	80 e2       	ldi	r24, 0x20	; 32
 13a:	9e e4       	ldi	r25, 0x4E	; 78
 13c:	fe 01       	movw	r30, r28
 13e:	31 97       	sbiw	r30, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <main+0x48>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 142:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 144:	d9 f7       	brne	.-10     	; 0x13c <main+0x46>
		_delay_ms(2000);
		PORTD |= _BV(LED_PIN); // turn LED off
 146:	93 9a       	sbi	0x12, 3	; 18
 148:	80 e2       	ldi	r24, 0x20	; 32
 14a:	9e e4       	ldi	r25, 0x4E	; 78
 14c:	fe 01       	movw	r30, r28
 14e:	31 97       	sbiw	r30, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <main+0x58>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 152:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 154:	d9 f7       	brne	.-10     	; 0x14c <main+0x56>
 156:	ec cf       	rjmp	.-40     	; 0x130 <main+0x3a>

00000158 <usbInit>:
/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbInit(void)
{
#if USB_INTR_CFG_SET != 0
    USB_INTR_CFG |= USB_INTR_CFG_SET;
 158:	85 b7       	in	r24, 0x35	; 53
 15a:	82 60       	ori	r24, 0x02	; 2
 15c:	85 bf       	out	0x35, r24	; 53
#endif
#if USB_INTR_CFG_CLR != 0
    USB_INTR_CFG &= ~(USB_INTR_CFG_CLR);
#endif
    USB_INTR_ENABLE |= (1 << USB_INTR_ENABLE_BIT);
 15e:	8b b7       	in	r24, 0x3b	; 59
 160:	80 64       	ori	r24, 0x40	; 64
 162:	8b bf       	out	0x3b, r24	; 59
    usbTxLen1 = USBPID_NAK;
#if USB_CFG_HAVE_INTRIN_ENDPOINT3
    usbTxLen3 = USBPID_NAK;
#endif
#endif
}
 164:	08 95       	ret

00000166 <usbPoll>:
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 166:	1f 93       	push	r17
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
schar   len;
uchar   i;

    len = usbRxLen - 3;
 16c:	90 91 73 00 	lds	r25, 0x0073
 170:	93 50       	subi	r25, 0x03	; 3
    if(len >= 0){
 172:	97 fd       	sbrc	r25, 7
 174:	88 c0       	rjmp	.+272    	; 0x286 <usbPoll+0x120>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 176:	20 91 70 00 	lds	r18, 0x0070
    if(usbRxToken < 0x10){  /* OUT to endpoint != 0: endpoint number in usbRxToken */
        usbFunctionWriteOut(data, len);
        return;
    }
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
 17a:	80 91 6f 00 	lds	r24, 0x006F
 17e:	8d 32       	cpi	r24, 0x2D	; 45
 180:	09 f0       	breq	.+2      	; 0x184 <usbPoll+0x1e>
 182:	7f c0       	rjmp	.+254    	; 0x282 <usbPoll+0x11c>
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
 184:	98 30       	cpi	r25, 0x08	; 8
 186:	09 f0       	breq	.+2      	; 0x18a <usbPoll+0x24>
 188:	7c c0       	rjmp	.+248    	; 0x282 <usbPoll+0x11c>
 * need data integrity checks with this driver, check the CRC in your app
 * code and report errors back to the host. Since the ACK was already sent,
 * retries must be handled on application level.
 * unsigned crc = usbCrc16(buffer + 1, usbRxLen - 3);
 */
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
 18a:	cc e0       	ldi	r28, 0x0C	; 12
 18c:	d0 e0       	ldi	r29, 0x00	; 0
 18e:	c2 1b       	sub	r28, r18
 190:	d1 09       	sbc	r29, r1
 192:	c9 58       	subi	r28, 0x89	; 137
 194:	df 4f       	sbci	r29, 0xFF	; 255
#endif
    if(usbRxToken == (uchar)USBPID_SETUP){
        if(len != 8)    /* Setup size must be always 8 bytes. Ignore otherwise. */
            return;
        usbMsgLen_t replyLen;
        usbTxBuf[0] = USBPID_DATA0;         /* initialize data toggling */
 196:	83 ec       	ldi	r24, 0xC3	; 195
 198:	80 93 63 00 	sts	0x0063, r24
        usbTxLen = USBPID_NAK;              /* abort pending transmit */
 19c:	8a e5       	ldi	r24, 0x5A	; 90
 19e:	80 93 60 00 	sts	0x0060, r24
        usbMsgFlags = 0;
 1a2:	10 92 62 00 	sts	0x0062, r1
        uchar type = rq->bmRequestType & USBRQ_TYPE_MASK;
        if(type != USBRQ_TYPE_STANDARD){    /* standard requests are handled by driver */
 1a6:	88 81       	ld	r24, Y
 1a8:	80 76       	andi	r24, 0x60	; 96
 1aa:	29 f0       	breq	.+10     	; 0x1b6 <usbPoll+0x50>
            replyLen = usbFunctionSetup(data);
 1ac:	ce 01       	movw	r24, r28
 1ae:	0e 94 70 00 	call	0xe0	; 0xe0 <usbFunctionSetup>
 1b2:	28 2f       	mov	r18, r24
 1b4:	5d c0       	rjmp	.+186    	; 0x270 <usbPoll+0x10a>
 */
static inline usbMsgLen_t usbDriverSetup(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar   *dataPtr = usbTxBuf + 9;    /* there are 2 bytes free space at the end of the buffer */
uchar   value = rq->wValue.bytes[0];
 1b6:	9a 81       	ldd	r25, Y+2	; 0x02
#if USB_CFG_IMPLEMENT_HALT
uchar   index = rq->wIndex.bytes[0];
#endif

    dataPtr[0] = 0; /* default reply common to USBRQ_GET_STATUS and USBRQ_GET_INTERFACE */
 1b8:	10 92 6c 00 	sts	0x006C, r1
    SWITCH_START(rq->bRequest)
 1bc:	89 81       	ldd	r24, Y+1	; 0x01
    SWITCH_CASE(USBRQ_GET_STATUS)           /* 0 */
 1be:	88 23       	and	r24, r24
 1c0:	21 f4       	brne	.+8      	; 0x1ca <usbPoll+0x64>
            dataPtr[0] =  USB_CFG_IS_SELF_POWERED;
#if USB_CFG_IMPLEMENT_HALT
        if(recipient == USBRQ_RCPT_ENDPOINT && index == 0x81)   /* request status for endpoint 1 */
            dataPtr[0] = usbTxLen1 == USBPID_STALL;
#endif
        dataPtr[1] = 0;
 1c2:	10 92 6d 00 	sts	0x006D, r1
 1c6:	22 e0       	ldi	r18, 0x02	; 2
 1c8:	4d c0       	rjmp	.+154    	; 0x264 <usbPoll+0xfe>
        if(value == 0 && index == 0x81){    /* feature 0 == HALT for endpoint == 1 */
            usbTxLen1 = rq->bRequest == USBRQ_CLEAR_FEATURE ? USBPID_NAK : USBPID_STALL;
            usbResetDataToggling();
        }
#endif
    SWITCH_CASE(USBRQ_SET_ADDRESS)          /* 5 */
 1ca:	85 30       	cpi	r24, 0x05	; 5
 1cc:	19 f4       	brne	.+6      	; 0x1d4 <usbPoll+0x6e>
        usbNewDeviceAddr = value;
 1ce:	90 93 74 00 	sts	0x0074, r25
 1d2:	47 c0       	rjmp	.+142    	; 0x262 <usbPoll+0xfc>
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
 1d4:	86 30       	cpi	r24, 0x06	; 6
 1d6:	b1 f5       	brne	.+108    	; 0x244 <usbPoll+0xde>
static inline usbMsgLen_t usbDriverDescriptor(usbRequest_t *rq)
{
usbMsgLen_t len = 0;
uchar       flags = USB_FLG_MSGPTR_IS_ROM;

    SWITCH_START(rq->wValue.bytes[1])
 1d8:	8b 81       	ldd	r24, Y+3	; 0x03
    SWITCH_CASE(USBDESCR_DEVICE)    /* 1 */
 1da:	81 30       	cpi	r24, 0x01	; 1
 1dc:	19 f4       	brne	.+6      	; 0x1e4 <usbPoll+0x7e>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_DEVICE, usbDescriptorDevice)
 1de:	8e e7       	ldi	r24, 0x7E	; 126
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	04 c0       	rjmp	.+8      	; 0x1ec <usbPoll+0x86>
    SWITCH_CASE(USBDESCR_CONFIG)    /* 2 */
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	41 f4       	brne	.+16     	; 0x1f8 <usbPoll+0x92>
        GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_CONFIGURATION, usbDescriptorConfiguration)
 1e8:	80 e9       	ldi	r24, 0x90	; 144
 1ea:	90 e0       	ldi	r25, 0x00	; 0
 1ec:	90 93 72 00 	sts	0x0072, r25
 1f0:	80 93 71 00 	sts	0x0071, r24
 1f4:	22 e1       	ldi	r18, 0x12	; 18
 1f6:	22 c0       	rjmp	.+68     	; 0x23c <usbPoll+0xd6>
    SWITCH_CASE(USBDESCR_STRING)    /* 3 */
 1f8:	83 30       	cpi	r24, 0x03	; 3
 1fa:	f9 f4       	brne	.+62     	; 0x23a <usbPoll+0xd4>
#if USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC
        if(USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_RAM)
            flags = 0;
        len = usbFunctionDescriptor(rq);
#else   /* USB_CFG_DESCR_PROPS_STRINGS & USB_PROP_IS_DYNAMIC */
        SWITCH_START(rq->wValue.bytes[0])
 1fc:	8a 81       	ldd	r24, Y+2	; 0x02
        SWITCH_CASE(0)
 1fe:	88 23       	and	r24, r24
 200:	41 f4       	brne	.+16     	; 0x212 <usbPoll+0xac>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_0, usbDescriptorString0)
 202:	84 e5       	ldi	r24, 0x54	; 84
 204:	90 e0       	ldi	r25, 0x00	; 0
 206:	90 93 72 00 	sts	0x0072, r25
 20a:	80 93 71 00 	sts	0x0071, r24
 20e:	24 e0       	ldi	r18, 0x04	; 4
 210:	15 c0       	rjmp	.+42     	; 0x23c <usbPoll+0xd6>
        SWITCH_CASE(1)
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	41 f4       	brne	.+16     	; 0x226 <usbPoll+0xc0>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_VENDOR, usbDescriptorStringVendor)
 216:	88 e5       	ldi	r24, 0x58	; 88
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	90 93 72 00 	sts	0x0072, r25
 21e:	80 93 71 00 	sts	0x0071, r24
 222:	28 e1       	ldi	r18, 0x18	; 24
 224:	0b c0       	rjmp	.+22     	; 0x23c <usbPoll+0xd6>
        SWITCH_CASE(2)
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	41 f4       	brne	.+16     	; 0x23a <usbPoll+0xd4>
            GET_DESCRIPTOR(USB_CFG_DESCR_PROPS_STRING_PRODUCT, usbDescriptorStringDevice)
 22a:	80 e7       	ldi	r24, 0x70	; 112
 22c:	90 e0       	ldi	r25, 0x00	; 0
 22e:	90 93 72 00 	sts	0x0072, r25
 232:	80 93 71 00 	sts	0x0071, r24
 236:	2e e0       	ldi	r18, 0x0E	; 14
 238:	01 c0       	rjmp	.+2      	; 0x23c <usbPoll+0xd6>
 23a:	20 e0       	ldi	r18, 0x00	; 0
    SWITCH_DEFAULT
        if(USB_CFG_DESCR_PROPS_UNKNOWN & USB_PROP_IS_DYNAMIC){
            len = usbFunctionDescriptor(rq);
        }
    SWITCH_END
    usbMsgFlags = flags;
 23c:	80 e4       	ldi	r24, 0x40	; 64
 23e:	80 93 62 00 	sts	0x0062, r24
 242:	16 c0       	rjmp	.+44     	; 0x270 <usbPoll+0x10a>
        usbNewDeviceAddr = value;
        USB_SET_ADDRESS_HOOK();
    SWITCH_CASE(USBRQ_GET_DESCRIPTOR)       /* 6 */
        len = usbDriverDescriptor(rq);
        goto skipMsgPtrAssignment;
    SWITCH_CASE(USBRQ_GET_CONFIGURATION)    /* 8 */
 244:	88 30       	cpi	r24, 0x08	; 8
 246:	21 f4       	brne	.+8      	; 0x250 <usbPoll+0xea>
 248:	21 e0       	ldi	r18, 0x01	; 1
 24a:	86 e7       	ldi	r24, 0x76	; 118
 24c:	90 e0       	ldi	r25, 0x00	; 0
 24e:	0c c0       	rjmp	.+24     	; 0x268 <usbPoll+0x102>
        dataPtr = &usbConfiguration;  /* send current configuration value */
        len = 1;
    SWITCH_CASE(USBRQ_SET_CONFIGURATION)    /* 9 */
 250:	89 30       	cpi	r24, 0x09	; 9
 252:	19 f4       	brne	.+6      	; 0x25a <usbPoll+0xf4>
        usbConfiguration = value;
 254:	90 93 76 00 	sts	0x0076, r25
 258:	04 c0       	rjmp	.+8      	; 0x262 <usbPoll+0xfc>
        usbResetStall();
    SWITCH_CASE(USBRQ_GET_INTERFACE)        /* 10 */
 25a:	8a 30       	cpi	r24, 0x0A	; 10
 25c:	11 f4       	brne	.+4      	; 0x262 <usbPoll+0xfc>
 25e:	21 e0       	ldi	r18, 0x01	; 1
 260:	01 c0       	rjmp	.+2      	; 0x264 <usbPoll+0xfe>
 262:	20 e0       	ldi	r18, 0x00	; 0
 264:	8c e6       	ldi	r24, 0x6C	; 108
 266:	90 e0       	ldi	r25, 0x00	; 0
        usbResetStall();
#endif
    SWITCH_DEFAULT                          /* 7=SET_DESCRIPTOR, 12=SYNC_FRAME */
        /* Should we add an optional hook here? */
    SWITCH_END
    usbMsgPtr = (usbMsgPtr_t)dataPtr;
 268:	90 93 72 00 	sts	0x0072, r25
 26c:	80 93 71 00 	sts	0x0071, r24
            }
            usbMsgFlags = USB_FLG_USE_USER_RW;
        }else   /* The 'else' prevents that we limit a replyLen of USB_NO_MSG to the maximum transfer len. */
#endif
        if(sizeof(replyLen) < sizeof(rq->wLength.word)){ /* help compiler with optimizing */
            if(!rq->wLength.bytes[1] && replyLen > rq->wLength.bytes[0])    /* limit length to max */
 270:	8f 81       	ldd	r24, Y+7	; 0x07
 272:	88 23       	and	r24, r24
 274:	21 f4       	brne	.+8      	; 0x27e <usbPoll+0x118>
 276:	8e 81       	ldd	r24, Y+6	; 0x06
 278:	82 17       	cp	r24, r18
 27a:	08 f4       	brcc	.+2      	; 0x27e <usbPoll+0x118>
 27c:	28 2f       	mov	r18, r24
                replyLen = rq->wLength.bytes[0];
        }else{
            if(replyLen > rq->wLength.word)     /* limit length to max */
                replyLen = rq->wLength.word;
        }
        usbMsgLen = replyLen;
 27e:	20 93 61 00 	sts	0x0061, r18
        usbProcessRx(usbRxBuf + USB_BUFSIZE + 1 - usbInputBufOffset, len);
#if USB_CFG_HAVE_FLOWCONTROL
        if(usbRxLen > 0)    /* only mark as available if not inactivated */
            usbRxLen = 0;
#else
        usbRxLen = 0;       /* mark rx buffer as available */
 282:	10 92 73 00 	sts	0x0073, r1
#endif
    }
    if(usbTxLen & 0x10){    /* transmit system idle */
 286:	80 91 60 00 	lds	r24, 0x0060
 28a:	84 ff       	sbrs	r24, 4
 28c:	46 c0       	rjmp	.+140    	; 0x31a <usbPoll+0x1b4>
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
 28e:	80 91 61 00 	lds	r24, 0x0061
 292:	8f 3f       	cpi	r24, 0xFF	; 255
 294:	09 f4       	brne	.+2      	; 0x298 <usbPoll+0x132>
 296:	41 c0       	rjmp	.+130    	; 0x31a <usbPoll+0x1b4>
 298:	18 2f       	mov	r17, r24
 29a:	89 30       	cpi	r24, 0x09	; 9
 29c:	08 f0       	brcs	.+2      	; 0x2a0 <usbPoll+0x13a>
 29e:	18 e0       	ldi	r17, 0x08	; 8
uchar       len;

    wantLen = usbMsgLen;
    if(wantLen > 8)
        wantLen = 8;
    usbMsgLen -= wantLen;
 2a0:	81 1b       	sub	r24, r17
 2a2:	80 93 61 00 	sts	0x0061, r24
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
 2a6:	80 91 63 00 	lds	r24, 0x0063
 2aa:	98 e8       	ldi	r25, 0x88	; 136
 2ac:	89 27       	eor	r24, r25
 2ae:	80 93 63 00 	sts	0x0063, r24
/* This function is similar to usbFunctionRead(), but it's also called for
 * data handled automatically by the driver (e.g. descriptor reads).
 */
static uchar usbDeviceRead(uchar *data, uchar len)
{
    if(len > 0){    /* don't bother app with 0 sized reads */
 2b2:	11 23       	and	r17, r17
 2b4:	21 f1       	breq	.+72     	; 0x2fe <usbPoll+0x198>
            len = usbFunctionRead(data, len);
        }else
#endif
        {
            uchar i = len;
            usbMsgPtr_t r = usbMsgPtr;
 2b6:	20 91 71 00 	lds	r18, 0x0071
 2ba:	30 91 72 00 	lds	r19, 0x0072
            if(usbMsgFlags & USB_FLG_MSGPTR_IS_ROM){    /* ROM data */
 2be:	80 91 62 00 	lds	r24, 0x0062
 2c2:	86 ff       	sbrs	r24, 6
 2c4:	0a c0       	rjmp	.+20     	; 0x2da <usbPoll+0x174>
 2c6:	91 2f       	mov	r25, r17
 2c8:	f9 01       	movw	r30, r18
 2ca:	a4 e6       	ldi	r26, 0x64	; 100
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
                do{
                    uchar c = USB_READ_FLASH(r);    /* assign to char size variable to enforce byte ops */
 2ce:	84 91       	lpm	r24, Z+
                    *data++ = c;
 2d0:	8d 93       	st	X+, r24
                    r++;
 2d2:	31 96       	adiw	r30, 0x01	; 1
                }while(--i);
 2d4:	91 50       	subi	r25, 0x01	; 1
 2d6:	d9 f7       	brne	.-10     	; 0x2ce <usbPoll+0x168>
 2d8:	08 c0       	rjmp	.+16     	; 0x2ea <usbPoll+0x184>
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 2da:	91 2f       	mov	r25, r17
 2dc:	d9 01       	movw	r26, r18
 2de:	e4 e6       	ldi	r30, 0x64	; 100
 2e0:	f0 e0       	ldi	r31, 0x00	; 0
                    *data++ = c;
                    r++;
                }while(--i);
            }else{  /* RAM data */
                do{
                    *data++ = *((uchar *)r);
 2e2:	8d 91       	ld	r24, X+
 2e4:	81 93       	st	Z+, r24
                    r++;
                }while(--i);
 2e6:	91 50       	subi	r25, 0x01	; 1
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <usbPoll+0x17c>
}

/* ------------------------------------------------------------------------- */

USB_PUBLIC void usbPoll(void)
{
 2ea:	c9 01       	movw	r24, r18
 2ec:	01 96       	adiw	r24, 0x01	; 1
 2ee:	11 50       	subi	r17, 0x01	; 1
 2f0:	81 0f       	add	r24, r17
 2f2:	91 1d       	adc	r25, r1
 2f4:	1f 5f       	subi	r17, 0xFF	; 255
                do{
                    *data++ = *((uchar *)r);
                    r++;
                }while(--i);
            }
            usbMsgPtr = r;
 2f6:	90 93 72 00 	sts	0x0072, r25
 2fa:	80 93 71 00 	sts	0x0071, r24
        wantLen = 8;
    usbMsgLen -= wantLen;
    usbTxBuf[0] ^= USBPID_DATA0 ^ USBPID_DATA1; /* DATA toggling */
    len = usbDeviceRead(usbTxBuf + 1, wantLen);
    if(len <= 8){           /* valid data packet */
        usbCrc16Append(&usbTxBuf[1], len);
 2fe:	84 e6       	ldi	r24, 0x64	; 100
 300:	90 e0       	ldi	r25, 0x00	; 0
 302:	61 2f       	mov	r22, r17
 304:	0e 94 b0 01 	call	0x360	; 0x360 <usbCrc16Append>
        len += 4;           /* length including sync byte */
 308:	61 2f       	mov	r22, r17
 30a:	6c 5f       	subi	r22, 0xFC	; 252
        if(len < 12)        /* a partial package identifies end of message */
 30c:	6c 30       	cpi	r22, 0x0C	; 12
 30e:	19 f0       	breq	.+6      	; 0x316 <usbPoll+0x1b0>
            usbMsgLen = USB_NO_MSG;
 310:	8f ef       	ldi	r24, 0xFF	; 255
 312:	80 93 61 00 	sts	0x0061, r24
    }else{
        len = USBPID_STALL;   /* stall the endpoint */
        usbMsgLen = USB_NO_MSG;
    }
    usbTxLen = len;
 316:	60 93 60 00 	sts	0x0060, r22
 31a:	94 e1       	ldi	r25, 0x14	; 20
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
        uchar usbLineStatus = USBIN & USBMASK;
 31c:	80 b3       	in	r24, 0x10	; 16
        if(usbLineStatus != 0)  /* SE0 has ended */
 31e:	83 70       	andi	r24, 0x03	; 3
 320:	31 f4       	brne	.+12     	; 0x32e <usbPoll+0x1c8>
    if(usbTxLen & 0x10){    /* transmit system idle */
        if(usbMsgLen != USB_NO_MSG){    /* transmit data pending? */
            usbBuildTxBlock();
        }
    }
    for(i = 20; i > 0; i--){
 322:	91 50       	subi	r25, 0x01	; 1
 324:	d9 f7       	brne	.-10     	; 0x31c <usbPoll+0x1b6>
        uchar usbLineStatus = USBIN & USBMASK;
        if(usbLineStatus != 0)  /* SE0 has ended */
            goto isNotReset;
    }
    /* RESET condition, called multiple times during reset */
    usbNewDeviceAddr = 0;
 326:	10 92 74 00 	sts	0x0074, r1
    usbDeviceAddr = 0;
 32a:	10 92 6e 00 	sts	0x006E, r1
    usbResetStall();
    DBG1(0xff, 0, 0);
isNotReset:
    usbHandleResetHook(i);
}
 32e:	df 91       	pop	r29
 330:	cf 91       	pop	r28
 332:	1f 91       	pop	r17
 334:	08 95       	ret

00000336 <usbCrc16>:
;   poly    r20+r21
;   scratch r23
;   resCrc  r24+r25 / r16+r17
;   ptr     X / Z
usbCrc16:
    mov     ptrL, argPtrL
 336:	a8 2f       	mov	r26, r24
    mov     ptrH, argPtrH
 338:	b9 2f       	mov	r27, r25
    ldi     resCrcL, 0
 33a:	80 e0       	ldi	r24, 0x00	; 0
    ldi     resCrcH, 0
 33c:	90 e0       	ldi	r25, 0x00	; 0
    ldi     polyL, lo8(0xa001)
 33e:	41 e0       	ldi	r20, 0x01	; 1
    ldi     polyH, hi8(0xa001)
 340:	50 ea       	ldi	r21, 0xA0	; 160
    com     argLen      ; argLen = -argLen - 1: modified loop to ensure that carry is set
 342:	60 95       	com	r22
    ldi     bitCnt, 0   ; loop counter with starnd condition = end condition
 344:	30 e0       	ldi	r19, 0x00	; 0
    rjmp    usbCrcLoopEntry
 346:	09 c0       	rjmp	.+18     	; 0x35a <usbCrcLoopEntry>

00000348 <usbCrcByteLoop>:
usbCrcByteLoop:
    ld      byte, ptr+
 348:	2d 91       	ld	r18, X+
    eor     resCrcL, byte
 34a:	82 27       	eor	r24, r18

0000034c <usbCrcBitLoop>:
usbCrcBitLoop:
    ror     resCrcH     ; carry is always set here (see brcs jumps to here)
 34c:	97 95       	ror	r25
    ror     resCrcL
 34e:	87 95       	ror	r24
    brcs    usbCrcNoXor
 350:	10 f0       	brcs	.+4      	; 0x356 <usbCrcNoXor>
    eor     resCrcL, polyL
 352:	84 27       	eor	r24, r20
    eor     resCrcH, polyH
 354:	95 27       	eor	r25, r21

00000356 <usbCrcNoXor>:
usbCrcNoXor:
    subi    bitCnt, 224 ; (8 * 224) % 256 = 0; this loop iterates 8 times
 356:	30 5e       	subi	r19, 0xE0	; 224
    brcs    usbCrcBitLoop
 358:	c8 f3       	brcs	.-14     	; 0x34c <usbCrcBitLoop>

0000035a <usbCrcLoopEntry>:
usbCrcLoopEntry:
    subi    argLen, -1
 35a:	6f 5f       	subi	r22, 0xFF	; 255
    brcs    usbCrcByteLoop
 35c:	a8 f3       	brcs	.-22     	; 0x348 <usbCrcByteLoop>

0000035e <usbCrcReady>:
usbCrcReady:
    ret
 35e:	08 95       	ret

00000360 <usbCrc16Append>:

#endif /* USB_USE_FAST_CRC */

; extern unsigned usbCrc16Append(unsigned char *data, unsigned char len);
usbCrc16Append:
    rcall   usbCrc16
 360:	ea df       	rcall	.-44     	; 0x336 <usbCrc16>
    st      ptr+, resCrcL
 362:	8d 93       	st	X+, r24
    st      ptr+, resCrcH
 364:	9d 93       	st	X+, r25
    ret
 366:	08 95       	ret

00000368 <__vector_1>:
;max allowable interrupt latency: 34 cycles -> max 25 cycles interrupt disable
;max stack usage: [ret(2), YL, SREG, YH, shift, x1, x2, x3, cnt, x4] = 11 bytes
;Numbers in brackets are maximum cycles since SOF.
USB_INTR_VECTOR:
;order of registers pushed: YL, SREG [sofError], YH, shift, x1, x2, x3, cnt
    push    YL              ;2 [35] push only what is necessary to sync with edge ASAP
 368:	cf 93       	push	r28
    in      YL, SREG        ;1 [37]
 36a:	cf b7       	in	r28, 0x3f	; 63
    push    YL              ;2 [39]
 36c:	cf 93       	push	r28

0000036e <waitForJ>:
;sync up with J to K edge during sync pattern -- use fastest possible loops
;The first part waits at most 1 bit long since we must be in sync pattern.
;YL is guarenteed to be < 0x80 because I flag is clear. When we jump to
;waitForJ, ensure that this prerequisite is met.
waitForJ:
    inc     YL
 36e:	c3 95       	inc	r28
    sbis    USBIN, USBMINUS
 370:	80 9b       	sbis	0x10, 0	; 16
    brne    waitForJ        ; just make sure we have ANY timeout
 372:	e9 f7       	brne	.-6      	; 0x36e <waitForJ>

00000374 <waitForK>:
waitForK:
;The following code results in a sampling window of 1/4 bit which meets the spec.
    sbis    USBIN, USBMINUS
 374:	80 9b       	sbis	0x10, 0	; 16
    rjmp    foundK
 376:	09 c0       	rjmp	.+18     	; 0x38a <foundK>
    sbis    USBIN, USBMINUS
 378:	80 9b       	sbis	0x10, 0	; 16
    rjmp    foundK
 37a:	07 c0       	rjmp	.+14     	; 0x38a <foundK>
    sbis    USBIN, USBMINUS
 37c:	80 9b       	sbis	0x10, 0	; 16
    rjmp    foundK
 37e:	05 c0       	rjmp	.+10     	; 0x38a <foundK>
    sbis    USBIN, USBMINUS
 380:	80 9b       	sbis	0x10, 0	; 16
    rjmp    foundK
 382:	03 c0       	rjmp	.+6      	; 0x38a <foundK>
    sbis    USBIN, USBMINUS
 384:	80 9b       	sbis	0x10, 0	; 16
    rjmp    foundK
 386:	01 c0       	rjmp	.+2      	; 0x38a <foundK>
    sts     usbSofCount, YL
#endif  /* USB_COUNT_SOF */
#ifdef USB_SOF_HOOK
    USB_SOF_HOOK
#endif
    rjmp    sofError
 388:	a1 c0       	rjmp	.+322    	; 0x4cc <sofError>

0000038a <foundK>:
foundK:
;{3, 5} after falling D- edge, average delay: 4 cycles [we want 4 for center sampling]
;we have 1 bit time for setup purposes, then sample again. Numbers in brackets
;are cycles from center of first sync (double K) bit after the instruction
    push    YH                  ;2 [2]
 38a:	df 93       	push	r29
    lds     YL, usbInputBufOffset;2 [4]
 38c:	c0 91 70 00 	lds	r28, 0x0070
    clr     YH                  ;1 [5]
 390:	dd 27       	eor	r29, r29
    subi    YL, lo8(-(usbRxBuf));1 [6]
 392:	c9 58       	subi	r28, 0x89	; 137
    sbci    YH, hi8(-(usbRxBuf));1 [7]
 394:	df 4f       	sbci	r29, 0xFF	; 255

    sbis    USBIN, USBMINUS ;1 [8] we want two bits K [sample 1 cycle too early]
 396:	80 9b       	sbis	0x10, 0	; 16
    rjmp    haveTwoBitsK    ;2 [10]
 398:	02 c0       	rjmp	.+4      	; 0x39e <haveTwoBitsK>
    pop     YH              ;2 [11] undo the push from before
 39a:	df 91       	pop	r29
    rjmp    waitForK        ;2 [13] this was not the end of sync, retry
 39c:	eb cf       	rjmp	.-42     	; 0x374 <waitForK>

0000039e <haveTwoBitsK>:
haveTwoBitsK:
;----------------------------------------------------------------------------
; push more registers and initialize values while we sample the first bits:
;----------------------------------------------------------------------------
    push    shift           ;2 [16]
 39e:	2f 93       	push	r18
    push    x1              ;2 [12]
 3a0:	0f 93       	push	r16
    push    x2              ;2 [14]
 3a2:	1f 93       	push	r17

    in      x1, USBIN       ;1 [17] <-- sample bit 0
 3a4:	00 b3       	in	r16, 0x10	; 16
    ldi     shift, 0xff     ;1 [18]
 3a6:	2f ef       	ldi	r18, 0xFF	; 255
    bst     x1, USBMINUS    ;1 [19]
 3a8:	00 fb       	bst	r16, 0
    bld     shift, 0        ;1 [20]
 3aa:	20 f9       	bld	r18, 0
    push    x3              ;2 [22]
 3ac:	4f 93       	push	r20
    push    cnt             ;2 [24]
 3ae:	3f 93       	push	r19
    
    in      x2, USBIN       ;1 [25] <-- sample bit 1
 3b0:	10 b3       	in	r17, 0x10	; 16
    ser     x3              ;1 [26] [inserted init instruction]
 3b2:	4f ef       	ldi	r20, 0xFF	; 255
    eor     x1, x2          ;1 [27]
 3b4:	01 27       	eor	r16, r17
    bst     x1, USBMINUS    ;1 [28]
 3b6:	00 fb       	bst	r16, 0
    bld     shift, 1        ;1 [29]
 3b8:	21 f9       	bld	r18, 1
    ldi     cnt, USB_BUFSIZE;1 [30] [inserted init instruction]
 3ba:	3b e0       	ldi	r19, 0x0B	; 11
    rjmp    rxbit2          ;2 [32]
 3bc:	31 c0       	rjmp	.+98     	; 0x420 <rxbit2>

000003be <unstuff0>:
;----------------------------------------------------------------------------
; Receiver loop (numbers in brackets are cycles within byte after instr)
;----------------------------------------------------------------------------

unstuff0:               ;1 (branch taken)
    andi    x3, ~0x01   ;1 [15]
 3be:	4e 7f       	andi	r20, 0xFE	; 254
    mov     x1, x2      ;1 [16] x2 contains last sampled (stuffed) bit
 3c0:	01 2f       	mov	r16, r17
    in      x2, USBIN   ;1 [17] <-- sample bit 1 again
 3c2:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x01 ;1 [18]
 3c4:	21 60       	ori	r18, 0x01	; 1
    rjmp    didUnstuff0 ;2 [20]
 3c6:	28 c0       	rjmp	.+80     	; 0x418 <didUnstuff0>

000003c8 <unstuff1>:

unstuff1:               ;1 (branch taken)
    mov     x2, x1      ;1 [21] x1 contains last sampled (stuffed) bit
 3c8:	10 2f       	mov	r17, r16
    andi    x3, ~0x02   ;1 [22]
 3ca:	4d 7f       	andi	r20, 0xFD	; 253
    ori     shift, 0x02 ;1 [23]
 3cc:	22 60       	ori	r18, 0x02	; 2
    nop                 ;1 [24]
 3ce:	00 00       	nop
    in      x1, USBIN   ;1 [25] <-- sample bit 2 again
 3d0:	00 b3       	in	r16, 0x10	; 16
    rjmp    didUnstuff1 ;2 [27]
 3d2:	29 c0       	rjmp	.+82     	; 0x426 <didUnstuff1>

000003d4 <unstuff2>:

unstuff2:               ;1 (branch taken)
    andi    x3, ~0x04   ;1 [29]
 3d4:	4b 7f       	andi	r20, 0xFB	; 251
    ori     shift, 0x04 ;1 [30]
 3d6:	24 60       	ori	r18, 0x04	; 4
    mov     x1, x2      ;1 [31] x2 contains last sampled (stuffed) bit
 3d8:	01 2f       	mov	r16, r17
    nop                 ;1 [32]
 3da:	00 00       	nop
    in      x2, USBIN   ;1 [33] <-- sample bit 3
 3dc:	10 b3       	in	r17, 0x10	; 16
    rjmp    didUnstuff2 ;2 [35]
 3de:	2b c0       	rjmp	.+86     	; 0x436 <didUnstuff2>

000003e0 <unstuff3>:

unstuff3:               ;1 (branch taken)
    in      x2, USBIN   ;1 [34] <-- sample stuffed bit 3 [one cycle too late]
 3e0:	10 b3       	in	r17, 0x10	; 16
    andi    x3, ~0x08   ;1 [35]
 3e2:	47 7f       	andi	r20, 0xF7	; 247
    ori     shift, 0x08 ;1 [36]
 3e4:	28 60       	ori	r18, 0x08	; 8
    rjmp    didUnstuff3 ;2 [38]
 3e6:	2a c0       	rjmp	.+84     	; 0x43c <didUnstuff3>

000003e8 <unstuff4>:

unstuff4:               ;1 (branch taken)
    andi    x3, ~0x10   ;1 [40]
 3e8:	4f 7e       	andi	r20, 0xEF	; 239
    in      x1, USBIN   ;1 [41] <-- sample stuffed bit 4
 3ea:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x10 ;1 [42]
 3ec:	20 61       	ori	r18, 0x10	; 16
    rjmp    didUnstuff4 ;2 [44]
 3ee:	2c c0       	rjmp	.+88     	; 0x448 <didUnstuff4>

000003f0 <unstuff5>:

unstuff5:               ;1 (branch taken)
    andi    x3, ~0x20   ;1 [48]
 3f0:	4f 7d       	andi	r20, 0xDF	; 223
    in      x2, USBIN   ;1 [49] <-- sample stuffed bit 5
 3f2:	10 b3       	in	r17, 0x10	; 16
    ori     shift, 0x20 ;1 [50]
 3f4:	20 62       	ori	r18, 0x20	; 32
    rjmp    didUnstuff5 ;2 [52]
 3f6:	2f c0       	rjmp	.+94     	; 0x456 <didUnstuff5>

000003f8 <unstuff6>:

unstuff6:               ;1 (branch taken)
    andi    x3, ~0x40   ;1 [56]
 3f8:	4f 7b       	andi	r20, 0xBF	; 191
    in      x1, USBIN   ;1 [57] <-- sample stuffed bit 6
 3fa:	00 b3       	in	r16, 0x10	; 16
    ori     shift, 0x40 ;1 [58]
 3fc:	20 64       	ori	r18, 0x40	; 64
    rjmp    didUnstuff6 ;2 [60]
 3fe:	32 c0       	rjmp	.+100    	; 0x464 <didUnstuff6>

00000400 <rxLoop>:
; bit 4:    none
; bit 5:    none
; bit 6:    none
; bit 7:    jump, eor
rxLoop:
    eor     x3, shift   ;1 [0] reconstruct: x3 is 0 at bit locations we changed, 1 at others
 400:	42 27       	eor	r20, r18
    in      x1, USBIN   ;1 [1] <-- sample bit 0
 402:	00 b3       	in	r16, 0x10	; 16
    st      y+, x3      ;2 [3] store data
 404:	49 93       	st	Y+, r20
    ser     x3          ;1 [4]
 406:	4f ef       	ldi	r20, 0xFF	; 255
    nop                 ;1 [5]
 408:	00 00       	nop
    eor     x2, x1      ;1 [6]
 40a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [7]
 40c:	10 fb       	bst	r17, 0
    bld     shift, 0    ;1 [8]
 40e:	20 f9       	bld	r18, 0
    in      x2, USBIN   ;1 [9] <-- sample bit 1 (or possibly bit 0 stuffed)
 410:	10 b3       	in	r17, 0x10	; 16
    andi    x2, USBMASK ;1 [10]
 412:	13 70       	andi	r17, 0x03	; 3
    breq    se0         ;1 [11] SE0 check for bit 1
 414:	c9 f1       	breq	.+114    	; 0x488 <se0>
    andi    shift, 0xf9 ;1 [12]
 416:	29 7f       	andi	r18, 0xF9	; 249

00000418 <didUnstuff0>:
didUnstuff0:
    breq    unstuff0    ;1 [13]
 418:	91 f2       	breq	.-92     	; 0x3be <unstuff0>
    eor     x1, x2      ;1 [14]
 41a:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [15]
 41c:	00 fb       	bst	r16, 0
    bld     shift, 1    ;1 [16]
 41e:	21 f9       	bld	r18, 1

00000420 <rxbit2>:
rxbit2:
    in      x1, USBIN   ;1 [17] <-- sample bit 2 (or possibly bit 1 stuffed)
 420:	00 b3       	in	r16, 0x10	; 16
    andi    shift, 0xf3 ;1 [18]
 422:	23 7f       	andi	r18, 0xF3	; 243
    breq    unstuff1    ;1 [19] do remaining work for bit 1
 424:	89 f2       	breq	.-94     	; 0x3c8 <unstuff1>

00000426 <didUnstuff1>:
didUnstuff1:
    subi    cnt, 1      ;1 [20]
 426:	31 50       	subi	r19, 0x01	; 1
    brcs    overflow    ;1 [21] loop control
 428:	58 f1       	brcs	.+86     	; 0x480 <overflow>
    eor     x2, x1      ;1 [22]
 42a:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [23]
 42c:	10 fb       	bst	r17, 0
    bld     shift, 2    ;1 [24]
 42e:	22 f9       	bld	r18, 2
    in      x2, USBIN   ;1 [25] <-- sample bit 3 (or possibly bit 2 stuffed)
 430:	10 b3       	in	r17, 0x10	; 16
    andi    shift, 0xe7 ;1 [26]
 432:	27 7e       	andi	r18, 0xE7	; 231
    breq    unstuff2    ;1 [27]
 434:	79 f2       	breq	.-98     	; 0x3d4 <unstuff2>

00000436 <didUnstuff2>:
didUnstuff2:
    eor     x1, x2      ;1 [28]
 436:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [29]
 438:	00 fb       	bst	r16, 0
    bld     shift, 3    ;1 [30]
 43a:	23 f9       	bld	r18, 3

0000043c <didUnstuff3>:
didUnstuff3:
    andi    shift, 0xcf ;1 [31]
 43c:	2f 7c       	andi	r18, 0xCF	; 207
    breq    unstuff3    ;1 [32]
 43e:	81 f2       	breq	.-96     	; 0x3e0 <unstuff3>
    in      x1, USBIN   ;1 [33] <-- sample bit 4
 440:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [34]
 442:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [35]
 444:	10 fb       	bst	r17, 0
    bld     shift, 4    ;1 [36]
 446:	24 f9       	bld	r18, 4

00000448 <didUnstuff4>:
didUnstuff4:
    andi    shift, 0x9f ;1 [37]
 448:	2f 79       	andi	r18, 0x9F	; 159
    breq    unstuff4    ;1 [38]
 44a:	71 f2       	breq	.-100    	; 0x3e8 <unstuff4>
    nop2                ;2 [40]
 44c:	00 c0       	rjmp	.+0      	; 0x44e <didUnstuff4+0x6>
    in      x2, USBIN   ;1 [41] <-- sample bit 5
 44e:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [42]
 450:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [43]
 452:	00 fb       	bst	r16, 0
    bld     shift, 5    ;1 [44]
 454:	25 f9       	bld	r18, 5

00000456 <didUnstuff5>:
didUnstuff5:
    andi    shift, 0x3f ;1 [45]
 456:	2f 73       	andi	r18, 0x3F	; 63
    breq    unstuff5    ;1 [46]
 458:	59 f2       	breq	.-106    	; 0x3f0 <unstuff5>
    nop2                ;2 [48]
 45a:	00 c0       	rjmp	.+0      	; 0x45c <didUnstuff5+0x6>
    in      x1, USBIN   ;1 [49] <-- sample bit 6
 45c:	00 b3       	in	r16, 0x10	; 16
    eor     x2, x1      ;1 [50]
 45e:	10 27       	eor	r17, r16
    bst     x2, USBMINUS;1 [51]
 460:	10 fb       	bst	r17, 0
    bld     shift, 6    ;1 [52]
 462:	26 f9       	bld	r18, 6

00000464 <didUnstuff6>:
didUnstuff6:
    cpi     shift, 0x02 ;1 [53]
 464:	22 30       	cpi	r18, 0x02	; 2
    brlo    unstuff6    ;1 [54]
 466:	40 f2       	brcs	.-112    	; 0x3f8 <unstuff6>
    nop2                ;2 [56]
 468:	00 c0       	rjmp	.+0      	; 0x46a <didUnstuff6+0x6>
    in      x2, USBIN   ;1 [57] <-- sample bit 7
 46a:	10 b3       	in	r17, 0x10	; 16
    eor     x1, x2      ;1 [58]
 46c:	01 27       	eor	r16, r17
    bst     x1, USBMINUS;1 [59]
 46e:	00 fb       	bst	r16, 0
    bld     shift, 7    ;1 [60]
 470:	27 f9       	bld	r18, 7

00000472 <didUnstuff7>:
didUnstuff7:
    cpi     shift, 0x04 ;1 [61]
 472:	24 30       	cpi	r18, 0x04	; 4
    brsh    rxLoop      ;2 [63] loop control
 474:	28 f6       	brcc	.-118    	; 0x400 <rxLoop>

00000476 <unstuff7>:
unstuff7:
    andi    x3, ~0x80   ;1 [63]
 476:	4f 77       	andi	r20, 0x7F	; 127
    ori     shift, 0x80 ;1 [64]
 478:	20 68       	ori	r18, 0x80	; 128
    in      x2, USBIN   ;1 [65] <-- sample stuffed bit 7
 47a:	10 b3       	in	r17, 0x10	; 16
    nop                 ;1 [66]
 47c:	00 00       	nop
    rjmp    didUnstuff7 ;2 [68]
 47e:	f9 cf       	rjmp	.-14     	; 0x472 <didUnstuff7>

00000480 <overflow>:
*/

#define token   x1

overflow:
    ldi     x2, 1<<USB_INTR_PENDING_BIT
 480:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ; clear any pending interrupts
 482:	1a bf       	out	0x3a, r17	; 58

00000484 <ignorePacket>:
ignorePacket:
    clr     token
 484:	00 27       	eor	r16, r16
    rjmp    storeTokenAndReturn
 486:	17 c0       	rjmp	.+46     	; 0x4b6 <handleSetupOrOut>

00000488 <se0>:
; Processing of received packet (numbers in brackets are cycles after center of SE0)
;----------------------------------------------------------------------------
;This is the only non-error exit point for the software receiver loop
;we don't check any CRCs here because there is no time left.
se0:
    subi    cnt, USB_BUFSIZE    ;[5]
 488:	3b 50       	subi	r19, 0x0B	; 11
    neg     cnt                 ;[6]
 48a:	31 95       	neg	r19
    sub     YL, cnt             ;[7]
 48c:	c3 1b       	sub	r28, r19
    sbci    YH, 0               ;[8]
 48e:	d0 40       	sbci	r29, 0x00	; 0
    ldi     x2, 1<<USB_INTR_PENDING_BIT ;[9]
 490:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[10] clear pending intr and check flag later. SE0 should be over.
 492:	1a bf       	out	0x3a, r17	; 58
    ld      token, y            ;[11]
 494:	08 81       	ld	r16, Y
    cpi     token, USBPID_DATA0 ;[13]
 496:	03 3c       	cpi	r16, 0xC3	; 195
    breq    handleData          ;[14]
 498:	e9 f0       	breq	.+58     	; 0x4d4 <handleData>
    cpi     token, USBPID_DATA1 ;[15]
 49a:	0b 34       	cpi	r16, 0x4B	; 75
    breq    handleData          ;[16]
 49c:	d9 f0       	breq	.+54     	; 0x4d4 <handleData>
    lds     shift, usbDeviceAddr;[17]
 49e:	20 91 6e 00 	lds	r18, 0x006E
    ldd     x2, y+1             ;[19] ADDR and 1 bit endpoint number
 4a2:	19 81       	ldd	r17, Y+1	; 0x01
    lsl     x2                  ;[21] shift out 1 bit endpoint number
 4a4:	11 0f       	add	r17, r17
    cpse    x2, shift           ;[22]
 4a6:	12 13       	cpse	r17, r18
    rjmp    ignorePacket        ;[23]
 4a8:	ed cf       	rjmp	.-38     	; 0x484 <ignorePacket>
/* only compute endpoint number in x3 if required later */
#if USB_CFG_HAVE_INTRIN_ENDPOINT || USB_CFG_IMPLEMENT_FN_WRITEOUT
    ldd     x3, y+2             ;[24] endpoint number + crc
    rol     x3                  ;[26] shift in LSB of endpoint
#endif
    cpi     token, USBPID_IN    ;[27]
 4aa:	09 36       	cpi	r16, 0x69	; 105
    breq    handleIn            ;[28]
 4ac:	41 f1       	breq	.+80     	; 0x4fe <handleIn>
    cpi     token, USBPID_SETUP ;[29]
 4ae:	0d 32       	cpi	r16, 0x2D	; 45
    breq    handleSetupOrOut    ;[30]
 4b0:	11 f0       	breq	.+4      	; 0x4b6 <handleSetupOrOut>
    cpi     token, USBPID_OUT   ;[31]
 4b2:	01 3e       	cpi	r16, 0xE1	; 225
    brne    ignorePacket        ;[32] must be ack, nak or whatever
 4b4:	39 f7       	brne	.-50     	; 0x484 <ignorePacket>

000004b6 <handleSetupOrOut>:
    andi    x3, 0xf             ;[32]
    breq    storeTokenAndReturn ;[33]
    mov     token, x3           ;[34] indicate that this is endpoint x OUT
#endif
storeTokenAndReturn:
    sts     usbCurrentTok, token;[35]
 4b6:	00 93 75 00 	sts	0x0075, r16

000004ba <doReturn>:
doReturn:
    POP_STANDARD                ;[37] 12...16 cycles
 4ba:	3f 91       	pop	r19
 4bc:	4f 91       	pop	r20
 4be:	1f 91       	pop	r17
 4c0:	0f 91       	pop	r16
 4c2:	2f 91       	pop	r18
 4c4:	df 91       	pop	r29
    USB_LOAD_PENDING(YL)        ;[49]
 4c6:	ca b7       	in	r28, 0x3a	; 58
    sbrc    YL, USB_INTR_PENDING_BIT;[50] check whether data is already arriving
 4c8:	c6 fd       	sbrc	r28, 6
    rjmp    waitForJ            ;[51] save the pops and pushes -- a new interrupt is already pending
 4ca:	51 cf       	rjmp	.-350    	; 0x36e <waitForJ>

000004cc <sofError>:
sofError:
    POP_RETI                    ;macro call
 4cc:	cf 91       	pop	r28
 4ce:	cf bf       	out	0x3f, r28	; 63
 4d0:	cf 91       	pop	r28
    reti
 4d2:	18 95       	reti

000004d4 <handleData>:

handleData:
#if USB_CFG_CHECK_CRC
    CRC_CLEANUP_AND_CHECK       ; jumps to ignorePacket if CRC error
#endif
    lds     shift, usbCurrentTok;[18]
 4d4:	20 91 75 00 	lds	r18, 0x0075
    tst     shift               ;[20]
 4d8:	22 23       	and	r18, r18
    breq    doReturn            ;[21]
 4da:	79 f3       	breq	.-34     	; 0x4ba <doReturn>
    lds     x2, usbRxLen        ;[22]
 4dc:	10 91 73 00 	lds	r17, 0x0073
    tst     x2                  ;[24]
 4e0:	11 23       	and	r17, r17
    brne    sendNakAndReti      ;[25]
 4e2:	11 f5       	brne	.+68     	; 0x528 <sendNakAndReti>
; 2006-03-11: The following two lines fix a problem where the device was not
; recognized if usbPoll() was called less frequently than once every 4 ms.
    cpi     cnt, 4              ;[26] zero sized data packets are status phase only -- ignore and ack
 4e4:	34 30       	cpi	r19, 0x04	; 4
    brmi    sendAckAndReti      ;[27] keep rx buffer clean -- we must not NAK next SETUP
 4e6:	12 f1       	brmi	.+68     	; 0x52c <sendAckAndReti>
#if USB_CFG_CHECK_DATA_TOGGLING
    sts     usbCurrentDataToken, token  ; store for checking by C code
#endif
    sts     usbRxLen, cnt       ;[28] store received data, swap buffers
 4e8:	30 93 73 00 	sts	0x0073, r19
    sts     usbRxToken, shift   ;[30]
 4ec:	20 93 6f 00 	sts	0x006F, r18
    lds     x2, usbInputBufOffset;[32] swap buffers
 4f0:	10 91 70 00 	lds	r17, 0x0070
    ldi     cnt, USB_BUFSIZE    ;[34]
 4f4:	3b e0       	ldi	r19, 0x0B	; 11
    sub     cnt, x2             ;[35]
 4f6:	31 1b       	sub	r19, r17
    sts     usbInputBufOffset, cnt;[36] buffers now swapped
 4f8:	30 93 70 00 	sts	0x0070, r19
    rjmp    sendAckAndReti      ;[38] 40 + 17 = 57 until SOP
 4fc:	17 c0       	rjmp	.+46     	; 0x52c <sendAckAndReti>

000004fe <handleIn>:

handleIn:
;We don't send any data as long as the C code has not processed the current
;input data and potentially updated the output data. That's more efficient
;in terms of code size than clearing the tx buffers when a packet is received.
    lds     x1, usbRxLen        ;[30]
 4fe:	00 91 73 00 	lds	r16, 0x0073
    cpi     x1, 1               ;[32] negative values are flow control, 0 means "buffer free"
 502:	01 30       	cpi	r16, 0x01	; 1
    brge    sendNakAndReti      ;[33] unprocessed input packet?
 504:	8c f4       	brge	.+34     	; 0x528 <sendNakAndReti>
    ldi     x1, USBPID_NAK      ;[34] prepare value for usbTxLen
 506:	0a e5       	ldi	r16, 0x5A	; 90
    brne    sendNakAndReti      ;[36]
#else
    brne    handleIn1           ;[36]
#endif
#endif
    lds     cnt, usbTxLen       ;[37]
 508:	30 91 60 00 	lds	r19, 0x0060
    sbrc    cnt, 4              ;[39] all handshake tokens have bit 4 set
 50c:	34 fd       	sbrc	r19, 4
    rjmp    sendCntAndReti      ;[40] 42 + 16 = 58 until SOP
 50e:	10 c0       	rjmp	.+32     	; 0x530 <sendCntAndReti>
    sts     usbTxLen, x1        ;[41] x1 == USBPID_NAK from above
 510:	00 93 60 00 	sts	0x0060, r16
    ldi     YL, lo8(usbTxBuf)   ;[43]
 514:	c3 e6       	ldi	r28, 0x63	; 99
    ldi     YH, hi8(usbTxBuf)   ;[44]
 516:	d0 e0       	ldi	r29, 0x00	; 0
    rjmp    usbSendAndReti      ;[45] 57 + 12 = 59 until SOP
 518:	0f c0       	rjmp	.+30     	; 0x538 <usbSendAndReti>

0000051a <stuffN1Delay>:
;----------------------------------------------------------------------------

txByteLoop:
txBitloop:
stuffN1Delay:                   ;     [03]
    ror     shift               ;[-5] [11] [59]
 51a:	27 95       	ror	r18
    brcc    doExorN1            ;[-4]      [60]
 51c:	a8 f4       	brcc	.+42     	; 0x548 <doExorN1>
    subi    x4, 1               ;[-3]
 51e:	51 50       	subi	r21, 0x01	; 1
    brne    commonN1            ;[-2]
 520:	a9 f4       	brne	.+42     	; 0x54c <commonN1>
    lsl     shift               ;[-1] compensate ror after rjmp stuffDelay
 522:	22 0f       	add	r18, r18
    nop                         ;[00] stuffing consists of just waiting 8 cycles
 524:	00 00       	nop
    rjmp    stuffN1Delay        ;[01] after ror, C bit is reliably clear
 526:	f9 cf       	rjmp	.-14     	; 0x51a <stuffN1Delay>

00000528 <sendNakAndReti>:

sendNakAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_NAK      ;1 [-18]
 528:	4a e5       	ldi	r20, 0x5A	; 90
    rjmp    usbSendX3           ;2 [-16]
 52a:	03 c0       	rjmp	.+6      	; 0x532 <usbSendX3>

0000052c <sendAckAndReti>:
sendAckAndReti:                 ;0 [-19] 19 cycles until SOP
    ldi     x3, USBPID_ACK      ;1 [-18]
 52c:	42 ed       	ldi	r20, 0xD2	; 210
    rjmp    usbSendX3           ;2 [-16]
 52e:	01 c0       	rjmp	.+2      	; 0x532 <usbSendX3>

00000530 <sendCntAndReti>:
sendCntAndReti:                 ;0 [-17] 17 cycles until SOP
    mov     x3, cnt             ;1 [-16]
 530:	43 2f       	mov	r20, r19

00000532 <usbSendX3>:
usbSendX3:                      ;0 [-16]
    ldi     YL, 20              ;1 [-15] 'x3' is R20
 532:	c4 e1       	ldi	r28, 0x14	; 20
    ldi     YH, 0               ;1 [-14]
 534:	d0 e0       	ldi	r29, 0x00	; 0
    ldi     cnt, 2              ;1 [-13]
 536:	32 e0       	ldi	r19, 0x02	; 2

00000538 <usbSendAndReti>:
;pointer to data in 'Y'
;number of bytes in 'cnt' -- including sync byte
;uses: x1...x2, x4, shift, cnt, Y [x1 = mirror USBOUT, x2 = USBMASK, x4 = bitstuff cnt]
;Numbers in brackets are time since first bit of sync pattern is sent (start of instruction)
usbSendAndReti:
    in      x2, USBDDR          ;[-12] 12 cycles until SOP
 538:	11 b3       	in	r17, 0x11	; 17
    ori     x2, USBMASK         ;[-11]
 53a:	13 60       	ori	r17, 0x03	; 3
    sbi     USBOUT, USBMINUS    ;[-10] prepare idle state; D+ and D- must have been 0 (no pullups)
 53c:	90 9a       	sbi	0x12, 0	; 18
    out     USBDDR, x2          ;[-8] <--- acquire bus
 53e:	11 bb       	out	0x11, r17	; 17
    in      x1, USBOUT          ;[-7] port mirror for tx loop
 540:	02 b3       	in	r16, 0x12	; 18
    ldi     shift, 0x40         ;[-6] sync byte is first byte sent (we enter loop after ror)
 542:	20 e4       	ldi	r18, 0x40	; 64
    ldi     x2, USBMASK         ;[-5]
 544:	13 e0       	ldi	r17, 0x03	; 3
    push    x4                  ;[-4]
 546:	5f 93       	push	r21

00000548 <doExorN1>:
doExorN1:
    eor     x1, x2              ;[-2] [06] [62]
 548:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[-1] [07] [63]
 54a:	56 e0       	ldi	r21, 0x06	; 6

0000054c <commonN1>:
commonN1:
stuffN2Delay:
    out     USBOUT, x1          ;[00] [08] [64] <--- set bit
 54c:	02 bb       	out	0x12, r16	; 18
    ror     shift               ;[01]
 54e:	27 95       	ror	r18
    brcc    doExorN2            ;[02]
 550:	20 f4       	brcc	.+8      	; 0x55a <doExorN2>
    subi    x4, 1               ;[03]
 552:	51 50       	subi	r21, 0x01	; 1
    brne    commonN2            ;[04]
 554:	21 f4       	brne	.+8      	; 0x55e <commonN2>
    lsl     shift               ;[05] compensate ror after rjmp stuffDelay
 556:	22 0f       	add	r18, r18
    rjmp    stuffN2Delay        ;[06] after ror, C bit is reliably clear
 558:	f9 cf       	rjmp	.-14     	; 0x54c <commonN1>

0000055a <doExorN2>:
doExorN2:
    eor     x1, x2              ;[04] [12]
 55a:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[05] [13]
 55c:	56 e0       	ldi	r21, 0x06	; 6

0000055e <commonN2>:
commonN2:
    nop                         ;[06] [14]
 55e:	00 00       	nop
    subi    cnt, 171            ;[07] [15] trick: (3 * 171) & 0xff = 1
 560:	3b 5a       	subi	r19, 0xAB	; 171
    out     USBOUT, x1          ;[08] [16] <--- set bit
 562:	02 bb       	out	0x12, r16	; 18
    brcs    txBitloop           ;[09]      [25] [41]
 564:	d0 f2       	brcs	.-76     	; 0x51a <stuffN1Delay>

00000566 <stuff6Delay>:

stuff6Delay:
    ror     shift               ;[42] [50]
 566:	27 95       	ror	r18
    brcc    doExor6             ;[43]
 568:	28 f4       	brcc	.+10     	; 0x574 <doExor6>
    subi    x4, 1               ;[44]
 56a:	51 50       	subi	r21, 0x01	; 1
    brne    common6             ;[45]
 56c:	29 f4       	brne	.+10     	; 0x578 <common6>
    lsl     shift               ;[46] compensate ror after rjmp stuffDelay
 56e:	22 0f       	add	r18, r18
    nop                         ;[47] stuffing consists of just waiting 8 cycles
 570:	00 00       	nop
    rjmp    stuff6Delay         ;[48] after ror, C bit is reliably clear
 572:	f9 cf       	rjmp	.-14     	; 0x566 <stuff6Delay>

00000574 <doExor6>:
doExor6:
    eor     x1, x2              ;[45] [53]
 574:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[46]
 576:	56 e0       	ldi	r21, 0x06	; 6

00000578 <common6>:
common6:
stuff7Delay:
    ror     shift               ;[47] [55]
 578:	27 95       	ror	r18
    out     USBOUT, x1          ;[48] <--- set bit
 57a:	02 bb       	out	0x12, r16	; 18
    brcc    doExor7             ;[49]
 57c:	20 f4       	brcc	.+8      	; 0x586 <doExor7>
    subi    x4, 1               ;[50]
 57e:	51 50       	subi	r21, 0x01	; 1
    brne    common7             ;[51]
 580:	21 f4       	brne	.+8      	; 0x58a <common7>
    lsl     shift               ;[52] compensate ror after rjmp stuffDelay
 582:	22 0f       	add	r18, r18
    rjmp    stuff7Delay         ;[53] after ror, C bit is reliably clear
 584:	f9 cf       	rjmp	.-14     	; 0x578 <common6>

00000586 <doExor7>:
doExor7:
    eor     x1, x2              ;[51] [59]
 586:	01 27       	eor	r16, r17
    ldi     x4, 6               ;[52]
 588:	56 e0       	ldi	r21, 0x06	; 6

0000058a <common7>:
common7:
    ld      shift, y+           ;[53]
 58a:	29 91       	ld	r18, Y+
    tst     cnt                 ;[55]
 58c:	33 23       	and	r19, r19
    out     USBOUT, x1          ;[56] <--- set bit
 58e:	02 bb       	out	0x12, r16	; 18
    brne    txByteLoop          ;[57]
 590:	21 f6       	brne	.-120    	; 0x51a <stuffN1Delay>

;make SE0:
    cbr     x1, USBMASK         ;[58] prepare SE0 [spec says EOP may be 15 to 18 cycles]
 592:	0c 7f       	andi	r16, 0xFC	; 252
    lds     x2, usbNewDeviceAddr;[59]
 594:	10 91 74 00 	lds	r17, 0x0074
    lsl     x2                  ;[61] we compare with left shifted address
 598:	11 0f       	add	r17, r17
    subi    YL, 2 + 20          ;[62] Only assign address on data packets, not ACK/NAK in x3
 59a:	c6 51       	subi	r28, 0x16	; 22
    sbci    YH, 0               ;[63]
 59c:	d0 40       	sbci	r29, 0x00	; 0
    out     USBOUT, x1          ;[00] <-- out SE0 -- from now 2 bits = 16 cycles until bus idle
 59e:	02 bb       	out	0x12, r16	; 18
;2006-03-06: moved transfer of new address to usbDeviceAddr from C-Code to asm:
;set address only after data packet was sent, not after handshake
    breq    skipAddrAssign      ;[01]
 5a0:	11 f0       	breq	.+4      	; 0x5a6 <skipAddrAssign>
    sts     usbDeviceAddr, x2   ; if not skipped: SE0 is one cycle longer
 5a2:	10 93 6e 00 	sts	0x006E, r17

000005a6 <skipAddrAssign>:
skipAddrAssign:
;end of usbDeviceAddress transfer
    ldi     x2, 1<<USB_INTR_PENDING_BIT;[03] int0 occurred during TX -- clear pending flag
 5a6:	10 e4       	ldi	r17, 0x40	; 64
    USB_STORE_PENDING(x2)       ;[04]
 5a8:	1a bf       	out	0x3a, r17	; 58
    ori     x1, USBIDLE         ;[05]
 5aa:	01 60       	ori	r16, 0x01	; 1
    in      x2, USBDDR          ;[06]
 5ac:	11 b3       	in	r17, 0x11	; 17
    cbr     x2, USBMASK         ;[07] set both pins to input
 5ae:	1c 7f       	andi	r17, 0xFC	; 252
    mov     x3, x1              ;[08]
 5b0:	40 2f       	mov	r20, r16
    cbr     x3, USBMASK         ;[09] configure no pullup on both pins
 5b2:	4c 7f       	andi	r20, 0xFC	; 252
    pop     x4                  ;[10]
 5b4:	5f 91       	pop	r21
    nop2                        ;[12]
 5b6:	00 c0       	rjmp	.+0      	; 0x5b8 <skipAddrAssign+0x12>
    nop2                        ;[14]
 5b8:	00 c0       	rjmp	.+0      	; 0x5ba <skipAddrAssign+0x14>
    out     USBOUT, x1          ;[16] <-- out J (idle) -- end of SE0 (EOP signal)
 5ba:	02 bb       	out	0x12, r16	; 18
    out     USBDDR, x2          ;[17] <-- release bus now
 5bc:	11 bb       	out	0x11, r17	; 17
    out     USBOUT, x3          ;[18] <-- ensure no pull-up resistors are active
 5be:	42 bb       	out	0x12, r20	; 18
    rjmp    doReturn
 5c0:	7c cf       	rjmp	.-264    	; 0x4ba <doReturn>

000005c2 <_exit>:
 5c2:	f8 94       	cli

000005c4 <__stop_program>:
 5c4:	ff cf       	rjmp	.-2      	; 0x5c4 <__stop_program>
